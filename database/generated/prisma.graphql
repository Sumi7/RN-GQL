type AggregateGoogleAuth {
  count: Int!
}

type AggregateSubTask {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type GoogleAuth {
  googleId: String!
  user: User
}

type GoogleAuthConnection {
  pageInfo: PageInfo!
  edges: [GoogleAuthEdge]!
  aggregate: AggregateGoogleAuth!
}

input GoogleAuthCreateInput {
  googleId: String!
  user: UserCreateOneWithoutGoogleInput
}

input GoogleAuthCreateOneWithoutUserInput {
  create: GoogleAuthCreateWithoutUserInput
  connect: GoogleAuthWhereUniqueInput
}

input GoogleAuthCreateWithoutUserInput {
  googleId: String!
}

type GoogleAuthEdge {
  node: GoogleAuth!
  cursor: String!
}

enum GoogleAuthOrderByInput {
  googleId_ASC
  googleId_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GoogleAuthPreviousValues {
  googleId: String!
}

type GoogleAuthSubscriptionPayload {
  mutation: MutationType!
  node: GoogleAuth
  updatedFields: [String!]
  previousValues: GoogleAuthPreviousValues
}

input GoogleAuthSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GoogleAuthWhereInput
  AND: [GoogleAuthSubscriptionWhereInput!]
  OR: [GoogleAuthSubscriptionWhereInput!]
  NOT: [GoogleAuthSubscriptionWhereInput!]
}

input GoogleAuthUpdateInput {
  googleId: String
  user: UserUpdateOneWithoutGoogleInput
}

input GoogleAuthUpdateManyMutationInput {
  googleId: String
}

input GoogleAuthUpdateOneWithoutUserInput {
  create: GoogleAuthCreateWithoutUserInput
  update: GoogleAuthUpdateWithoutUserDataInput
  upsert: GoogleAuthUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: GoogleAuthWhereUniqueInput
}

input GoogleAuthUpdateWithoutUserDataInput {
  googleId: String
}

input GoogleAuthUpsertWithoutUserInput {
  update: GoogleAuthUpdateWithoutUserDataInput!
  create: GoogleAuthCreateWithoutUserInput!
}

input GoogleAuthWhereInput {
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  user: UserWhereInput
  AND: [GoogleAuthWhereInput!]
  OR: [GoogleAuthWhereInput!]
  NOT: [GoogleAuthWhereInput!]
}

input GoogleAuthWhereUniqueInput {
  googleId: String
}

scalar Long

type Mutation {
  createGoogleAuth(data: GoogleAuthCreateInput!): GoogleAuth!
  updateGoogleAuth(data: GoogleAuthUpdateInput!, where: GoogleAuthWhereUniqueInput!): GoogleAuth
  updateManyGoogleAuths(data: GoogleAuthUpdateManyMutationInput!, where: GoogleAuthWhereInput): BatchPayload!
  upsertGoogleAuth(where: GoogleAuthWhereUniqueInput!, create: GoogleAuthCreateInput!, update: GoogleAuthUpdateInput!): GoogleAuth!
  deleteGoogleAuth(where: GoogleAuthWhereUniqueInput!): GoogleAuth
  deleteManyGoogleAuths(where: GoogleAuthWhereInput): BatchPayload!
  createSubTask(data: SubTaskCreateInput!): SubTask!
  updateSubTask(data: SubTaskUpdateInput!, where: SubTaskWhereUniqueInput!): SubTask
  updateManySubTasks(data: SubTaskUpdateManyMutationInput!, where: SubTaskWhereInput): BatchPayload!
  upsertSubTask(where: SubTaskWhereUniqueInput!, create: SubTaskCreateInput!, update: SubTaskUpdateInput!): SubTask!
  deleteSubTask(where: SubTaskWhereUniqueInput!): SubTask
  deleteManySubTasks(where: SubTaskWhereInput): BatchPayload!
  createTask(data: TaskCreateInput!): Task!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  googleAuth(where: GoogleAuthWhereUniqueInput!): GoogleAuth
  googleAuths(where: GoogleAuthWhereInput, orderBy: GoogleAuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoogleAuth]!
  googleAuthsConnection(where: GoogleAuthWhereInput, orderBy: GoogleAuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoogleAuthConnection!
  subTask(where: SubTaskWhereUniqueInput!): SubTask
  subTasks(where: SubTaskWhereInput, orderBy: SubTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubTask]!
  subTasksConnection(where: SubTaskWhereInput, orderBy: SubTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubTaskConnection!
  task(where: TaskWhereUniqueInput!): Task
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  googleAuth(where: GoogleAuthSubscriptionWhereInput): GoogleAuthSubscriptionPayload
  subTask(where: SubTaskSubscriptionWhereInput): SubTaskSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type SubTask {
  id: ID!
  index: Int!
  value: String!
  completed: Boolean!
  task: Task
}

type SubTaskConnection {
  pageInfo: PageInfo!
  edges: [SubTaskEdge]!
  aggregate: AggregateSubTask!
}

input SubTaskCreateInput {
  index: Int!
  value: String!
  completed: Boolean!
  task: TaskCreateOneWithoutSubTasksInput
}

input SubTaskCreateManyWithoutTaskInput {
  create: [SubTaskCreateWithoutTaskInput!]
  connect: [SubTaskWhereUniqueInput!]
}

input SubTaskCreateWithoutTaskInput {
  index: Int!
  value: String!
  completed: Boolean!
}

type SubTaskEdge {
  node: SubTask!
  cursor: String!
}

enum SubTaskOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  value_ASC
  value_DESC
  completed_ASC
  completed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubTaskPreviousValues {
  id: ID!
  index: Int!
  value: String!
  completed: Boolean!
}

input SubTaskScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  completed: Boolean
  completed_not: Boolean
  AND: [SubTaskScalarWhereInput!]
  OR: [SubTaskScalarWhereInput!]
  NOT: [SubTaskScalarWhereInput!]
}

type SubTaskSubscriptionPayload {
  mutation: MutationType!
  node: SubTask
  updatedFields: [String!]
  previousValues: SubTaskPreviousValues
}

input SubTaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubTaskWhereInput
  AND: [SubTaskSubscriptionWhereInput!]
  OR: [SubTaskSubscriptionWhereInput!]
  NOT: [SubTaskSubscriptionWhereInput!]
}

input SubTaskUpdateInput {
  index: Int
  value: String
  completed: Boolean
  task: TaskUpdateOneWithoutSubTasksInput
}

input SubTaskUpdateManyDataInput {
  index: Int
  value: String
  completed: Boolean
}

input SubTaskUpdateManyMutationInput {
  index: Int
  value: String
  completed: Boolean
}

input SubTaskUpdateManyWithoutTaskInput {
  create: [SubTaskCreateWithoutTaskInput!]
  delete: [SubTaskWhereUniqueInput!]
  connect: [SubTaskWhereUniqueInput!]
  disconnect: [SubTaskWhereUniqueInput!]
  update: [SubTaskUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [SubTaskUpsertWithWhereUniqueWithoutTaskInput!]
  deleteMany: [SubTaskScalarWhereInput!]
  updateMany: [SubTaskUpdateManyWithWhereNestedInput!]
}

input SubTaskUpdateManyWithWhereNestedInput {
  where: SubTaskScalarWhereInput!
  data: SubTaskUpdateManyDataInput!
}

input SubTaskUpdateWithoutTaskDataInput {
  index: Int
  value: String
  completed: Boolean
}

input SubTaskUpdateWithWhereUniqueWithoutTaskInput {
  where: SubTaskWhereUniqueInput!
  data: SubTaskUpdateWithoutTaskDataInput!
}

input SubTaskUpsertWithWhereUniqueWithoutTaskInput {
  where: SubTaskWhereUniqueInput!
  update: SubTaskUpdateWithoutTaskDataInput!
  create: SubTaskCreateWithoutTaskInput!
}

input SubTaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  index: Int
  index_not: Int
  index_in: [Int!]
  index_not_in: [Int!]
  index_lt: Int
  index_lte: Int
  index_gt: Int
  index_gte: Int
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  completed: Boolean
  completed_not: Boolean
  task: TaskWhereInput
  AND: [SubTaskWhereInput!]
  OR: [SubTaskWhereInput!]
  NOT: [SubTaskWhereInput!]
}

input SubTaskWhereUniqueInput {
  id: ID
  index: Int
}

type Task {
  id: ID!
  taskName: String!
  subTasks(where: SubTaskWhereInput, orderBy: SubTaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubTask!]
  members: [String!]!
  user: User
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  taskName: String!
  subTasks: SubTaskCreateManyWithoutTaskInput
  members: TaskCreatemembersInput
  user: UserCreateOneWithoutTasksInput
}

input TaskCreateManyWithoutUserInput {
  create: [TaskCreateWithoutUserInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreatemembersInput {
  set: [String!]
}

input TaskCreateOneWithoutSubTasksInput {
  create: TaskCreateWithoutSubTasksInput
  connect: TaskWhereUniqueInput
}

input TaskCreateWithoutSubTasksInput {
  taskName: String!
  members: TaskCreatemembersInput
  user: UserCreateOneWithoutTasksInput
}

input TaskCreateWithoutUserInput {
  taskName: String!
  subTasks: SubTaskCreateManyWithoutTaskInput
  members: TaskCreatemembersInput
}

type TaskEdge {
  node: Task!
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  taskName_ASC
  taskName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TaskPreviousValues {
  id: ID!
  taskName: String!
  members: [String!]!
}

input TaskScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  taskName: String
  taskName_not: String
  taskName_in: [String!]
  taskName_not_in: [String!]
  taskName_lt: String
  taskName_lte: String
  taskName_gt: String
  taskName_gte: String
  taskName_contains: String
  taskName_not_contains: String
  taskName_starts_with: String
  taskName_not_starts_with: String
  taskName_ends_with: String
  taskName_not_ends_with: String
  AND: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
  AND: [TaskSubscriptionWhereInput!]
  OR: [TaskSubscriptionWhereInput!]
  NOT: [TaskSubscriptionWhereInput!]
}

input TaskUpdateInput {
  taskName: String
  subTasks: SubTaskUpdateManyWithoutTaskInput
  members: TaskUpdatemembersInput
  user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateManyDataInput {
  taskName: String
  members: TaskUpdatemembersInput
}

input TaskUpdateManyMutationInput {
  taskName: String
  members: TaskUpdatemembersInput
}

input TaskUpdateManyWithoutUserInput {
  create: [TaskCreateWithoutUserInput!]
  delete: [TaskWhereUniqueInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TaskScalarWhereInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput!
  data: TaskUpdateManyDataInput!
}

input TaskUpdatemembersInput {
  set: [String!]
}

input TaskUpdateOneWithoutSubTasksInput {
  create: TaskCreateWithoutSubTasksInput
  update: TaskUpdateWithoutSubTasksDataInput
  upsert: TaskUpsertWithoutSubTasksInput
  delete: Boolean
  disconnect: Boolean
  connect: TaskWhereUniqueInput
}

input TaskUpdateWithoutSubTasksDataInput {
  taskName: String
  members: TaskUpdatemembersInput
  user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutUserDataInput {
  taskName: String
  subTasks: SubTaskUpdateManyWithoutTaskInput
  members: TaskUpdatemembersInput
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutUserDataInput!
}

input TaskUpsertWithoutSubTasksInput {
  update: TaskUpdateWithoutSubTasksDataInput!
  create: TaskCreateWithoutSubTasksInput!
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutUserDataInput!
  create: TaskCreateWithoutUserInput!
}

input TaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  taskName: String
  taskName_not: String
  taskName_in: [String!]
  taskName_not_in: [String!]
  taskName_lt: String
  taskName_lte: String
  taskName_gt: String
  taskName_gte: String
  taskName_contains: String
  taskName_not_contains: String
  taskName_starts_with: String
  taskName_not_starts_with: String
  taskName_ends_with: String
  taskName_not_ends_with: String
  subTasks_every: SubTaskWhereInput
  subTasks_some: SubTaskWhereInput
  subTasks_none: SubTaskWhereInput
  user: UserWhereInput
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
}

input TaskWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String
  google: GoogleAuth
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  admin: Boolean
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String
  google: GoogleAuthCreateOneWithoutUserInput
  tasks: TaskCreateManyWithoutUserInput
  members: UserCreateManyInput
  admin: Boolean
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutGoogleInput {
  create: UserCreateWithoutGoogleInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTasksInput {
  create: UserCreateWithoutTasksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGoogleInput {
  name: String!
  email: String!
  password: String
  tasks: TaskCreateManyWithoutUserInput
  members: UserCreateManyInput
  admin: Boolean
}

input UserCreateWithoutTasksInput {
  name: String!
  email: String!
  password: String
  google: GoogleAuthCreateOneWithoutUserInput
  members: UserCreateManyInput
  admin: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  admin_ASC
  admin_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String
  admin: Boolean
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  google: GoogleAuthUpdateOneWithoutUserInput
  tasks: TaskUpdateManyWithoutUserInput
  members: UserUpdateManyInput
  admin: Boolean
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  google: GoogleAuthUpdateOneWithoutUserInput
  tasks: TaskUpdateManyWithoutUserInput
  members: UserUpdateManyInput
  admin: Boolean
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
  admin: Boolean
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  admin: Boolean
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutGoogleInput {
  create: UserCreateWithoutGoogleInput
  update: UserUpdateWithoutGoogleDataInput
  upsert: UserUpsertWithoutGoogleInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTasksInput {
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksDataInput
  upsert: UserUpsertWithoutTasksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGoogleDataInput {
  name: String
  email: String
  password: String
  tasks: TaskUpdateManyWithoutUserInput
  members: UserUpdateManyInput
  admin: Boolean
}

input UserUpdateWithoutTasksDataInput {
  name: String
  email: String
  password: String
  google: GoogleAuthUpdateOneWithoutUserInput
  members: UserUpdateManyInput
  admin: Boolean
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithoutGoogleInput {
  update: UserUpdateWithoutGoogleDataInput!
  create: UserCreateWithoutGoogleInput!
}

input UserUpsertWithoutTasksInput {
  update: UserUpdateWithoutTasksDataInput!
  create: UserCreateWithoutTasksInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  google: GoogleAuthWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  admin: Boolean
  admin_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
