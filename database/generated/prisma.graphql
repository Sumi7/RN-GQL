type AggregateGoogleAuth {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type GoogleAuth {
  googleId: String!
  user: User
}

type GoogleAuthConnection {
  pageInfo: PageInfo!
  edges: [GoogleAuthEdge]!
  aggregate: AggregateGoogleAuth!
}

input GoogleAuthCreateInput {
  googleId: String!
  user: UserCreateOneWithoutGoogleInput
}

input GoogleAuthCreateOneWithoutUserInput {
  create: GoogleAuthCreateWithoutUserInput
  connect: GoogleAuthWhereUniqueInput
}

input GoogleAuthCreateWithoutUserInput {
  googleId: String!
}

type GoogleAuthEdge {
  node: GoogleAuth!
  cursor: String!
}

enum GoogleAuthOrderByInput {
  googleId_ASC
  googleId_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GoogleAuthPreviousValues {
  googleId: String!
}

type GoogleAuthSubscriptionPayload {
  mutation: MutationType!
  node: GoogleAuth
  updatedFields: [String!]
  previousValues: GoogleAuthPreviousValues
}

input GoogleAuthSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GoogleAuthWhereInput
  AND: [GoogleAuthSubscriptionWhereInput!]
  OR: [GoogleAuthSubscriptionWhereInput!]
  NOT: [GoogleAuthSubscriptionWhereInput!]
}

input GoogleAuthUpdateInput {
  googleId: String
  user: UserUpdateOneWithoutGoogleInput
}

input GoogleAuthUpdateManyMutationInput {
  googleId: String
}

input GoogleAuthUpdateOneWithoutUserInput {
  create: GoogleAuthCreateWithoutUserInput
  update: GoogleAuthUpdateWithoutUserDataInput
  upsert: GoogleAuthUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: GoogleAuthWhereUniqueInput
}

input GoogleAuthUpdateWithoutUserDataInput {
  googleId: String
}

input GoogleAuthUpsertWithoutUserInput {
  update: GoogleAuthUpdateWithoutUserDataInput!
  create: GoogleAuthCreateWithoutUserInput!
}

input GoogleAuthWhereInput {
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  user: UserWhereInput
  AND: [GoogleAuthWhereInput!]
  OR: [GoogleAuthWhereInput!]
  NOT: [GoogleAuthWhereInput!]
}

input GoogleAuthWhereUniqueInput {
  googleId: String
}

scalar Long

type Mutation {
  createGoogleAuth(data: GoogleAuthCreateInput!): GoogleAuth!
  updateGoogleAuth(data: GoogleAuthUpdateInput!, where: GoogleAuthWhereUniqueInput!): GoogleAuth
  updateManyGoogleAuths(data: GoogleAuthUpdateManyMutationInput!, where: GoogleAuthWhereInput): BatchPayload!
  upsertGoogleAuth(where: GoogleAuthWhereUniqueInput!, create: GoogleAuthCreateInput!, update: GoogleAuthUpdateInput!): GoogleAuth!
  deleteGoogleAuth(where: GoogleAuthWhereUniqueInput!): GoogleAuth
  deleteManyGoogleAuths(where: GoogleAuthWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  googleAuth(where: GoogleAuthWhereUniqueInput!): GoogleAuth
  googleAuths(where: GoogleAuthWhereInput, orderBy: GoogleAuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoogleAuth]!
  googleAuthsConnection(where: GoogleAuthWhereInput, orderBy: GoogleAuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoogleAuthConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  googleAuth(where: GoogleAuthSubscriptionWhereInput): GoogleAuthSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String
  google: GoogleAuth
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String
  google: GoogleAuthCreateOneWithoutUserInput
}

input UserCreateOneWithoutGoogleInput {
  create: UserCreateWithoutGoogleInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGoogleInput {
  name: String!
  email: String!
  password: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  google: GoogleAuthUpdateOneWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutGoogleInput {
  create: UserCreateWithoutGoogleInput
  update: UserUpdateWithoutGoogleDataInput
  upsert: UserUpsertWithoutGoogleInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGoogleDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutGoogleInput {
  update: UserUpdateWithoutGoogleDataInput!
  create: UserCreateWithoutGoogleInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  google: GoogleAuthWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
